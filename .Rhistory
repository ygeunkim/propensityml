x
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob") %>% .[]
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob") %>% .[]
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
?rlang::sym
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
?ensym
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
z %>% dplyr::group_by(mcname) %>% compute_balance(treatment = "exposure", outcome = "y", exclude = "exposure_prob")
z
z %>% dplyr::group_by(mcname) %>% compute_balance(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"))
z %>% tibble::tibble() %>% dplyr::group_by(mcname) %>% compute_balance(treatment = "exposure", outcome = "y", exclude = "exposure_prob")
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z %>% dpyr::group_by(mcname) %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z %>% dpylr::group_by(mcname) %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z %>% dplyr::group_by(mcname) %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
z[mcname == 1]
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
library(propensityml)
library(propensityml)
x <- sim_outcome(1000)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
x
z <- mc_setoguchi(10, 100)
z
?stop
x
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(data.table)
x
z
z[,]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, compute_asam, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob), by = mcname]
z[,lapply(.SD, function(x) {.SD %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
z[,lapply(.SD, function(x) {x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
x[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})]
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob) %>% as.numeric()}), by = mcname]
z
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = get(exposure) ~ . - get(y) - get(exposure_prob)) %>% as.numeric()}), by = mcname]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, compute_asam, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob), by = mcname]
library(propensityml)
z[,lapply(.SD, compute_asam, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob), by = mcname]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
library(propensityml)
x <- sim_outcome(1000)
z <- mc_setoguchi(10, 100)
z
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
?compute_asam
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
z
z[scenario == ]
z[scenario == 1]
z[mcname == 1]
z
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
lapply(1:10, function(mc) {compute_asam(x[mcname == mc], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})
lapply(1:10, function(mc) {compute_asam(z[mcname == mc], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})
compute_asam(z[mcname == 1], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[mcname == 1]
compute_asam(z[mcname == 1], treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob)
compute_asam(z[mcname == 1, -"mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% data.table::rbindlist()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% data.table::rbindlist() %>% mean()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% data.table::rbindlist() %>% colMeans()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% mean()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% unlist()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% unlist() %>% mean()
?parallel::mclapply
dt
library(propensityml)
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname") %>% .[]
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname") %>% .[]
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
usethis::use_package("parallel")
library(propensityml)
library(propensityml)
doMC::registerDoMC(4)
small_list <- foreach(scenario = c("A", "B", "F", "G"), .combine = rbind) %dopar% {
mc_setoguchi(N = 10, n_dat = 100, scenario = scenario, parallel = TRUE)[,
scenario := scenario]
}
small_list <- foreach::foreach(scenario = c("A", "B", "F", "G"), .combine = rbind) foreach::`%dopar%` {
mc_setoguchi(N = 10, n_dat = 100, scenario = scenario, parallel = TRUE)[,
scenario := scenario]
}
?foreach::`%dopar%`
library(foreach)
doMC::registerDoMC(4)
small_list <- foreach(scenario = c("A", "B", "F", "G"), .combine = rbind) %dopar% {
mc_setoguchi(N = 10, n_dat = 100, scenario = scenario, parallel = TRUE)[,
scenario := scenario]
}
small_list
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z[,mcname] %>% unique()
small_list[,mcname] %>% unique()
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
small_list
small_list[scenario == "A"]
small_list[scenario == "A"][mcname == 1]
small_list[scenario == "A"]
small_list[scenario == "A", .SD, .SDcols = -"scenario"]
small_list[scenario == "A", .SD, .SDcols = -"scenario"][mcname == 1]
small_list[scenario == "A", .SD, .SDcols = -"scenario"][mcname == 1] %>% nrow()
small_list[scenario == "A"][mcname == 1] %>% nrow()
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario") %>% .[,.(mean(asam)), by = SC]
x
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
small_list[,-"scenario"]
mc_asam(small_list[,-"scenario"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
library(propensityml)
mc_asam(small_list[,-"scenario"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
library(propensityml)
x <- sim_outcome(1000)
x
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob)
x %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob)
x %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% dplyr::mutate(ipw = ipw_wt * y)
x %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(ipw = mean(ipw_wt * y))
x %>% add_iptw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
x %>% add_iptw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(ipw = mean(iptw))
x %>% add_iptw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(ipw = mean(iptw * y))
x %>% add_iptw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
x %>% add_iptw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
x %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
x %>% add_iptw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob)
x %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
x %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob)
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(sd(iptw))
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(mean(iptw + .4))
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(mean(iptw / .4))
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(.4 / iptw)
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% dplyr::summarise(mean(.4 / iptw))
x %>% compute_asam(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
library(propensityml)
?as.formula
library(propensityml)
library(propensityml)
x <- mc_setoguchi(10, 100)
x
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = "mcname")
?data.table::setkey
add_propensity
?randomForest::randomForest
x
x <- sim_outcome(1000)
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob)
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf")
sim_outcome(1000)
set.seed(1)
sim_outcome(1000)
set.seed(1)
mc_setoguchi(10, 100)
set.seed(1)
mc_setoguchi(100, 10)
sim_outcome(100)
sim_outcome(1000)
?parallel::mclapply
library(propensityml)
mc_setoguchi(100, 10)
library(propensityml)
mc_setoguchi(100, 10)
x <- mc_setoguchi(10, 100)
x[, .N, by = .(mcname, scenario)]
x[, .N, by = scenario]
x[, .N, by = mcname]
x
x[, .N, by = .(mcname, scenario)]
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "scenario"))
x <- mc_setoguchi(10, 100, scenario = c("A", "B", "F", "G"))
x
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "scenario"))
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "scenario"))
x <- mc_setoguchi(10, 1000, scenario = c("A", "B", "F", "G"))
x
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "scenario"))
x <- mc_setoguchi(10, 100, scenario = c("A", "B", "F", "G"))
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "scenario"))
?switch
switch(1, x[1:5], x[2:6])
switch(2, x[1:5], x[2:6])
switch(3, x[1:5], x[2:6])
switch(3, {x[1:5]}, {x[2:6]})
switch(1, {x[1:5]}, {x[2:6]})
c("logit", "rf", "cart", "SVM")
c("logit", "rf", "cart", "SVM") %in% "logit"
c("logit", "rf", "cart", "SVM") == "logit"
which(c("logit", "rf", "cart", "SVM") == "logit")
switch("logit", "logit" = {x[1:5]}, "rf" = {x[2:6]})
switch("rf", "logit" = {x[1:5]}, "rf" = {x[2:6]})
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "scenario"))
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "scenario"))
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "scenario"))
?data.table::copy
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "scenario"))
x %>% tibble::tibble() %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "scenario"))
x
x %>% tibble::tibble()
is.data.table(x %>% tibble::tibble())
data.table::is.data.table(x %>% tibble::tibble())
x %>% tibble::tibble() %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "scenario"))
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "scenario"))
x[,.N,by = .(mcname, scenario)]
?data.table::setkey
unique(x[[c("mcname", "scenario")]])
unique(x[[c("mcname")]])
?foreach::`%:%`
x
library(propensityml)
set.seed(1)
doMC::registerDoMC(4)
x %>% tibble::tibble() %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
unique(x[["scenario"]])
unique(x[[sc_col]])
library(propensityml)
doMC::registerDoMC(4)
x %>% tibble::tibble() %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
doMC::registerDoMC(4)
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
x
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "scenario"))
library(propensityml)
doMC::registerDoMC(8)
x %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
z <- mc_setoguchi(10, 1000, scenario = c("A", "B", "F", "G"))
z
nrow(x)
nrow(z)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
doMC::registerDoMC(8)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario"))
library(propensityml)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "scenario")))
z
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
z
doMC::registerDoMC(8)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario"))
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
z
x
x
z
x
xx <- sim_outcome(1000)
doMC::registerDoMC(8)
xx %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf")
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob - mcname - scenario, method = "rf", mc_col = "mcname", sc_col = "scenario")
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob - mcname - scenario, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob - mcname - scenario, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
z
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
doMC::registerDoMC(4)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE))
doMC::registerDoMC(8)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE))
doMC::registerDoMC(16)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE))
z[scenario == "A"]
z[scenario == "A", mcname]
library(propensityml)
library(propensityml)
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
doMC::registerDoMC(8)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE))
library(propensityml)
doMC::registerDoMC(8)
system.time(z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario", parallel = TRUE))
library(propensityml)
library(propensityml)
z
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% compute_sipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
z %>% compute_sipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
doMC::registerDoMC(8)
z %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario", parallel = TRUE)
xx
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
xx
xx %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
xx %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario", parallel = T)
xx %>% add_propensity(formula = exposure ~ . - y - exposure_prob)
z
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario", parallel = T)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario", parallel = F)
xx %>% add_propensity(formula = exposure ~ . - y - exposure_prob)
library(propensityml)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario", parallel = F)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
xx %>% add_propensity(formula = exposure ~ . - y - exposure_prob)
xx
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
doMC::registerDoMC(8)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario", parallel = T)
z[mcname == 1 & scenario == "A"]
library(propensityml)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
xx %>% add_propensity(formula = exposure ~ . - y - exposure_prob)
library(propensityml)
z %>% add_propensity(formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
xx %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
source('~/Documents/GitHub/propensityml/R/weighting.R', echo=TRUE)
xx %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob)
library(data.table)
xx %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob)
xx %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% .[, .(IPW = mean(ipw_wt * y))]
xx %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% .[, .(IPW = mean(ipw_wt * y)), by = c(NULL, NULL)]
xx %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% .[, .(IPW = mean(ipw_wt * y)), by = NULL]
xx %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% .[, .(IPW = mean(ipw_wt * y)), by = list(NULL, NULL)]
library(propensityml)
xx %>% add_ipw_wt(treatment = "exposure", formula = exposure ~ . - y - exposure_prob) %>% .[, .(IPW = mean(ipw_wt * y)), by = list(NULL, NULL)]
library(propensityml)
library(propensityml)
xx %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
xx %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
library(propensityml)
x <- mc_setoguchi(10, 1000, scenario = c("A", "B", "F", "G"))
x
z <- sim_outcome(1000)
z %>% compute_ipw(treatment = 1000, outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
x %>% compute_ipw(treatment = 1000, outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
x %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
z %>% compute_sipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
x %>% compute_sipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
x %>% add_iptw(treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% compute_asam(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, weighting = "IPW")
x %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
x
merge(x, x %>% compute_ipw(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario"), by = c("mcname", "scenario"))
?compute_ipw
?compute_sipw
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, weighting = "IPW", mc_col = "mcname", sc_col = "scenario")
x
library(propensityml)
x <- mc_setoguchi(10, 100, scenario = c("A", "B", "F", "G"))
x
z <- sim_outcome(1000)
x
doMC::registerDoMC(8)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
x
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario") %>% tibble::tibble()
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, method = "rf", mc_col = "mcname", sc_col = "scenario")
library(propensityml)
library(propensityml)
library(propensityml)
z
z %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
is.null(c(NULL, NULL))
all(is.null(c(NULL, NULL)))
any(is.null(c(NULL, NULL)))
is.null(c(NULL, 1))
is.null(c(NULL, "1"))
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
library(propensityml)
library(propensityml)
