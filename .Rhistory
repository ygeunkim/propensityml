1:4
8:10
library(propensityml)
sim_outcome(5)
library(propensityml)
sim_outcome(5)
sim_outcome(50)
sim_outcome(50)[outcome_prob > .5]
?sim_outcome
LETTERS
LETTERS[1:7]
?match.arg
library(propensityml)
sim_outcome(50)
sim_outcome(50) %>% ps_cart(exposure ~ w3 + w10, data = .)
sim_outcome(50) %>% ps_glm(exposure ~ w3 + w10, data = .)
sim_outcome(50) %>% estimate_ps(exposure ~ w3 + w10, data = .)
sim_outcome(50) %>% ps_glm(exposure ~ w3 + w10, data = .) %>% estimate_ps()
sim_outcome(50) %>% ps_rf(exposure ~ w3 + w10, data = .) %>% estimate_ps()
sim_outcome(50) %>% ps_rf(exposure ~ w3 + w10, data = .)
sim_outcome(50) %>% dplyr::mutate(exposure = factor(exposure)) %>% ps_rf(exposure ~ w3 + w10, data = .)
sim_outcome(50) %>% dplyr::mutate(exposure = factor(exposure)) %>% ps_rf(exposure ~ w3 + w10, data = .) %>% estimate_ps()
sim_outcome(50) %>% dplyr::mutate(exposure = factor(exposure)) %>% ps_rf(exposure ~ w3 + w10, data = .) %>% predict(type = "prob")
(sim_outcome(50) %>% dplyr::mutate(exposure = factor(exposure)) %>% ps_rf(exposure ~ w3 + w10, data = .))$model %>% predict(type = "prob")
set.seed(1)
(sim_outcome(50) %>% dplyr::mutate(exposure = factor(exposure)) %>% ps_rf(exposure ~ w3 + w10, data = .))$model %>% predict(type = "prob")
set.seed(1)
sim_outcome(50) %>% dplyr::mutate(exposure = factor(exposure)) %>% ps_rf(exposure ~ w3 + w10, data = .) %>% estimate_ps()
sim_outcome(10)
sim_outcome(10) %>% tibble::tibble()
library(propensityml)
sim_outcome(10) %>% tibble::tibble()
library(propensityml)
sim_outcome(10) %>% tibble::tibble()
library(propensityml)
sim_outcome(10) %>% tibble::tibble()
library(propensityml)
sim_outcome(10) %>% tibble::tibble()
library(propensityml)
sim_outcome(10) %>% tibble::tibble()
sim_outcome(50) %>% dplyr::select(-w8, -w9, -w10) %>% ps_glm(exposure ~ ., data = .)
sim_outcome(50) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_glm(exposure ~ ., data = .)
sim_outcome(50) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .)
sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .)
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% plot()
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict()
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$classes
?rpart::rpart
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% names()
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$y
sim_outcome(10) %>% tibble::tibble()
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$y
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$control
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% names()
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$terms
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% dplyr::mutate(exposure = factor(exposure, levels = c(TRUE, FALSE))) %>% ps_cart(exposure ~ ., data = .))$model$terms
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% dplyr::mutate(exposure = if(exposure == 1, TRUE, FALSE)) %>% ps_cart(exposure ~ ., data = .))$model$terms
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% dplyr::mutate(exposure = ifelse(exposure == 1, TRUE, FALSE)) %>% ps_cart(exposure ~ ., data = .))$model$terms
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% dplyr::mutate(exposure = ifelse(exposure == 1, TRUE, FALSE)) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$model
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$method
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% names
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$y
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$cptable
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$terms
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$frame
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% names
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$params
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$parms
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$ordered
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$where
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model$y
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames
library(propensityml)
sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .)
sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .) %>% estimate_ps()
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")[, colnames((sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")) == 1]
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")[, colnames((sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")) == "1"]
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob")
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames()
which(c("1", "TRUE") %in% (sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames())
which(c("1", "TRUE") %in% (sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames() == 1)
(sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames()
c("1", "TRUE") %In% ((sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames())
c("1", "TRUE") %in% ((sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames())
which(c("1", "TRUE") %in% ((sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames()) == 1)
ifelse(which(c("1", "TRUE") %in% ((sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .))$model %>% predict(type = "prob") %>% colnames()) == 1) == 1, 1, TRUE)
library(propensityml)
sim_outcome(100) %>% dplyr::select(-w8, -w9, -w10, -outcome_prob) %>% ps_cart(exposure ~ ., data = .) %>% estimate_ps()
library(propensityml)
install.packages("e1071")
?e1071::svm
usethis::use_package("e1071")
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .)
svm
e1071::svm
?e1071::predict.svm
chemical %>% ps_svm(poisox ~ age + sex, data = .)
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% predict()
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict()
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict(probability = TRUE)
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% e1071::predict(probability = TRUE)
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict(decision.values = T)
?e1071::svm
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .)
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict()
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict(probability = T)
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% names
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model$compprob
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model$probA
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model$probB
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model$decision.values
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% names
predict((chemical %>% ps_svm(poisox ~ age + sex, data = .))$model, probability = TRUE)
e1071::predict.svm((chemical %>% ps_svm(poisox ~ age + sex, data = .))$model, probability = TRUE)
chemical
chemical %>% tibble::as_tibble()
(chemical %>% ps_svm(poisox ~ age + sex, data = .))
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% summary()
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict(probability = TRUE)
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict(probability = TRUE) %>% names()
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict(probability = TRUE) %>% attr("probabilities")
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% estimate_ps()
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% estimate_ps()
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% estimate_ps()
(chemical %>% ps_svm(poisox ~ age + sex, data = .))$model %>% predict(probability = TRUE) %>% attr("probabilities")
a <- chemical %>% ps_svm(poisox ~ age + sex, data = .)
a
predict(a$model, probability = TRUE)
predict(a$model, a$data, probability = TRUE)
attr(predict(a$model, a$data, probability = TRUE), "probabilities")
b <- predict(a$model, a$data, probability = TRUE)
b
b[,colnames(b) == 1]
class(b)
b
b <- attr(predict(a$model, a$data, probability = TRUE), "probabilities")
b
b[,colnames(b) == 1]
a
a$model %>% names
a$model$nclasses
a$model$y.scale
a$model$fitted
a$model %>% names
a$model$index
a$model %>% names
a$model$labels
b
colnames(b)
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% estimate_ps()
chemical %>% ps_glm(poisox ~ age + sex, data = .) %>% estimate_ps()
1 / dim(chemical)
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% estimate_ps()
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% estimate_ps()
?formula
formula("y ~ x1 + x2")
formula("y ~ x1 + x2") %>% as.character()
(formula("y ~ x1 + x2") %>% as.character())[3]
stringr::str_split((formula("y ~ x1 + x2") %>% as.character())[3], pattern = "\=")
stringr::str_split((formula("y ~ x1 + x2") %>% as.character())[3], pattern = "\+")
stringr::str_split((formula("y ~ x1 + x2") %>% as.character())[3], pattern = "\\+")
stringr::str_split_all((formula("y ~ x1 + x2") %>% as.character())[3], pattern = "\\+")
stringr::str_split_fixed((formula("y ~ x1 + x2") %>% as.character())[3], pattern = "\\+")
stringr::str_split_all((formula("y ~ x1 + x2 + x3") %>% as.character())[3], pattern = "\\+")
stringr::str_split((formula("y ~ x1 + x2 + x3") %>% as.character())[3], pattern = "\\+")
stringr::str_split((formula("y ~ x1 + x2 + x3") %>% as.character())[3], pattern = "\\+")[[1]] %>% stringr::str_squish()
stringr::str_split((formula("y ~ x1 + x2 + x3") %>% as.character())[3], pattern = "\\+")[[1]] %>% length()
usethis::use_package("stringr")
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = .) %>% estimate_ps()
stringr::str_split((formula("y ~ x1 + x2 + x3") %>% as.character())[3], pattern = "\\+")[[1]] %>% length()
stringr::str_split((formula("y ~ x1") %>% as.character())[3], pattern = "\\+")[[1]] %>% length()
chemical %>% ps_svm(poisox ~ age + sex, data = ., scale = T) %>% estimate_ps()
kernel
chemical %>% ps_svm(poisox ~ age + sex, data = ., scale = T)
(chemical %>% ps_svm(poisox ~ age + sex, data = ., scale = T))$model %>% summary()
(chemical %>% ps_svm(poisox ~ age + sex, data = ., scale = T))$model$gamma
1/ 2
library(propensityml)
library(propensityml)
library(propensityml)
?add_propensity
usethis::use_package("mvtnorm")
library(propensityml)
?setOldClass
usethis::use_package("methods")
library(propensityml)
library(propensityml)
library(propensityml)
?`propensityml-package`
?runif
?glm
usethis::use_package("stats")
?predict
?binomial
library(propensityml)
?predict
library(propensityml)
chemical %>% ps_svm(poisox ~ age + sex, data = ., scale = T) %>% estimate_ps()
?predict.ar
library(propensityml)
?`propmod-class`
?usethis::use_testthat
?usethis::use_test
usethis::use_testthat()
?testthat::context
library(testthat)
?expect_type
chemical
chemical %>% ps_glm(poisox ~ age + sex, data = .)
chemical %>% ps_glm(poisox ~ age + sex, data = .) %>% class
(chemical %>% ps_glm(poisox ~ age + sex, data = .))$model
expect_type((chemical %>% ps_glm(poisox ~ age + sex, data = .))$model, "glm")
?expect_type
expect_s3_class((chemical %>% ps_glm(poisox ~ age + sex, data = .))$model, "glm")
expect_s3_class(chemical %>% ps_glm(poisox ~ age + sex, data = .), "glm")
expect_s3_class(chemical %>% ps_glm(poisox ~ age + sex, data = .), "propmod")
expect_type(chemical %>% ps_glm(poisox ~ age + sex, data = .), "propmod")
chemical %>% ps_glm(poisox ~ age + sex, data = .)
chemical %>% ps_glm(poisox ~ age + sex, data = .) %>% length()
(chemical %>% ps_glm(poisox ~ age + sex, data = .))$model %>% class
(chemical %>% ps_rf(poisox ~ age + sex, data = .))$model %>% class
expect_s3_class((chemical %>% ps_glm(poisox ~ age + sex, data = .))$model, "randomForest")
expect_s3_class((chemical %>% ps_rf(poisox ~ age + sex, data = .))$model, "randomForest")
usethis::use_test()
library(propensityml)
?usethis::use_package
usethis::use_package("testthat", type = "Suggests")
library(propensityml)
?testthat
?testthat
?test_that
library(propensityml)
?usethis::use_package
usethis::use_package("covr", type = "Suggests")
?usethis::use_travis
usethis::use_travis()
library(propensityml)
library(propensityml)
library(propensityml)
?sim_outcome
(x <- sim_outcome(1000, covmat = build_covariate()))
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
out.width = "70%",
fig.align = "center",
fig.width = 6,
fig.asp = .618,
fig.pos = "H"
)
options(digits = 3)
(x <- sim_outcome(1000, covmat = build_covariate()))
x %>%
ps_glm(exposure ~ . -outcome_prob, data = .)
x %>%
ps_rf(exposure ~ . -outcome_prob, data = .)
(fit_rf <-
x %>%
ps_rf(exposure ~ . -outcome_prob, data = .))
names(fit_rf)
class(fit_rf)
estimate_ps(fit_rf)
estimate_ps(fit_rf) %>% head()
?estimate_ps
x
chemical
?covr::codecov
?usethis::use_github_action_check_standard
x
library(propensityml)
library(propensityml)
?compute_balance
x
compute_balance(x, "balance", outcome_prob, exposure)
compute_balance(x, "balance", "outcome_prob", "exposure")
x %>% colMeans()
x$w1 %>% class
x$w1 %>% mean
x$w1 %>% as.numeric()
x$w1 %>% readr::parse_number()
x %>% colSums()
x$w1 %>% as.numeric() %>% mean
x$w1 %>% as.numeric()
x$w1
as.numeric(levels(x$w1))
as.numeric(levels(x$w1))[x$w1]
library(propensityml)
x
compute_balance(x, "balance", "outcome_prob", "exposur")
compute_balance(x, "balance", "outcome_prob", "exposure")
x
x$w1 %>% class
library(propensityml)
compute_balance(x, "balance", "outcome_prob", "exposure")
library(data.table)
compute_moment <- function(x) {
if (is.factor(x)) x <- as.numeric(x)[x]
list(mean = mean(x), var = var(x))
}
x %>% compute_moment()
x %>% compute_moment("exposure", "outcome_prob")
x
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = "outcome_prob"]
x
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = "outcome_prob"] %>% melt(id.vars = -"outcome_prob")
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"] %>% melt(id.vars = "outcome_prob")
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"] %>% melt(id.vars = "exposure")
x %>% tidy_moment("exposure", "outcome_prob")
tidy_moment <- function(data, treatment, col_exclude) {
data[,
unlist(lapply(.SD, compute_moment)) %>% as.list(),
by = treatment,
.SDcols = -col_exclude] %>%
melt(id.vars = treatment) %>%
.[,
c("variable", "moment") := tstrsplit(variable, ".", fixed = TRUE)]
}
x %>% tidy_moment("exposure", "outcome_prob")
x %>% tidy_moment("exposure", "outcome_prob") %>% .[]
x
x %>% tidy_moment("exposure", "outcome_prob") %>% .[]
x %>% tidy_moment("exposure", "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = exposure]
?setNames
compute_balance <- function(data, col_name = "balance", outcome, treatment) {
data %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c(treatment, col_name))
}
x %>% compute_balance(outcome = "outcom_prob", treatment = "exposure")
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
compute_balance <- function(data, col_name = "balance", outcome, treatment) {
data %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c(treatment, col_name))
}
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
x %>% tidy_moment("exposure", "outcome_prob") %>% .[]
x %>% tidy_moment("exposure", "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = exposure]
x %>% tidy_moment("exposure", "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable]
x %>% compute_balance(outcome = "outcom_prob", treatment = "exposure")
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
var(x$w1[x$exposure == 1])
x$exposure == 1
var(x$w1[x$exposure == 1])
x$w1[x$exposure == 1]
as.numeric(x$w1[x$exposure == 1])
a
a <- as.numeric(x$w1)[x$w1]
a
a
x$w1
library(propensityml)
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
a <- as.numeric(levels(x$w1))[x$w1]
a
a[x$exposure == 1]
mean(a[x$exposure == 1])
var(a[x$exposure == 1])
var(a[x$exposure == 0])
var(a[x$exposure == 1]) / 2
tidy_moment(x, "exposure", "outcome_prob")
tidy_moment(x, "exposure", "outcome_prob")[]
tidy_moment(x, "exposure", "outcome_prob") %>% tidyr::spread(moment, value)
?dcast
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(moment ~ .)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(. ~ .)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(. ~ moment)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(value ~ moment)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment)
compute_balance <- function(data, col_name = "balance", outcome, treatment) {
data %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c(treatment, col_name))
}
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean)), by = variable]
.0221+.0297
-.0423+.0297
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% [order(variable)]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[order(variable)]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "%03d")]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "%s%03d")]
?sprintf
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "s%03d")]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "s%02d")]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "%s%02d")]
paste0("w", 0:7)
paste0("w", 0:7) %>% sprintf(fmt = "%03d")
paste0("w", 0:7) %>% sprintf(fmt = "%s%03d")
paste0("w", sprintf(0:7, fmt = "%03d"))
paste0("w", sprintf(0:7, fmt = "%02d"))
paste0("w", sprintf(8:10, fmt = "%02d"))
paste0("w", sprintf(8:10, fmt = "%03d"))
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable]
x
x %>% .[unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -outcome_prob]
x %>% .[unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
a <- as.numeric(levels(x$w1))[x$w1]
a
a[x$exposure == 1]
var(a[x$exposure == 1])
var(a[x$exposure == 0])
mean(a[x$exposure == 0])
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x$w2 %>% class
mean(x$w2[x$exposure == 1])
x %>% .[, lapply(.SD, compute_moment), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, as.list(lapply(.SD, compute_moment)), by = exposure, .SDcols = -"outcome_prob"]
var(a[x$exposure == 1])
is.factor(x$w1)
x %>% .[, as.list(lapply(.SD, compute_moment)) %>% list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, as.list(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
var(a[x$exposure == 1])
is.factor(x$w8)
b <- as.numeric(levels(x$w8))[x$w8]
var(b[x$exposure == 0])
var(b[x$exposure == 1])
a <- as.numeric(levels(x$w1))[x$w1]
var(a[x$exposure == 0])
var(a[x$exposure == 1])
mean(a[x$exposure == 1])
mean(a[x$exposure == 0])
mean(b[x$exposure == 1])
mean(b[x$exposure == 0])
x$w1
a
x
install.packages(c("cli", "globals", "magrittr", "pillar", "RcppArmadillo", "vctrs"))
compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
levels(x$w1)
levels(x$w2)
levels(x$w8)
library(propensityml)
compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
tidy_moment(x, "exposure", "outcome_prob")
tidy_moment(x, "exposure", "outcome_prob")[]
library(propensityml)
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]})
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% apply(2, class)
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[]
?dplyr::mutate_if
library(propensityml)
x %>% compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[]
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable]
library(propensityml)
x %>% compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
?setNames
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable]
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>% setNames(c("variable", "balance"))
library(propensityml)
x %>% compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
x %>% compute_balance(x, col_name = "balance", outcome = "outcome_prob", treatment = "exposure")
compute_balance(x, col_name = "balance", outcome = "outcome_prob", treatment = "exposure")
compute_balance(x, col_name = "balance", outcome = "outcome_prob", treatment = "exposure")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>% setNames(c("variable", "balance"))
library(propensityml)
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>% setNames(c("variable", "balance"))
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable] %>% setNames(c("variable", "balance"))
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable]
x %>% compute_balance(col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
compute_balance <- function(data, col_name = "balance", treatment, outcome) {
data %>%
mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c("variable", col_name))
}
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
library(dplyr)
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
