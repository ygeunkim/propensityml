compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob") %>% .[,balance] %>% mean()
library(propensityml)
library(propensityml)
x
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
add_iptw(x, "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_ipw_wt(x, "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_iptw(x, "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$IPW
rep(compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$IPW, each = 2)
length(NULL)
rep(1:5, each = 0)
rep(1:5, each = 0)
x
x$mcname %>% unique() %>% length()
x[,.N, by = mcname]
library(propensityml)
add_iptw(x, "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
seq_len(x[["mcname"]] %>% unique())
seq_len(x$mcname %>% unique())
x$mcname
x$mcname %>% unique()
seq_along(x$mcname %>% unique())
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", exclude = "mcname")
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_iptw(x, "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
library(propensityml)
library(propensityml)
x <- sim_outcome(1000)
x[,mcname := rep(1:10, each = 100)]
x
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
x[,-"mcname"] %>% compute_asam(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob)
x
x[,-"mcname"]
x[,-"mcname"] %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
x[,-"mcname"] %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
x
library(propensityml)
x[,-"mcname"] %>% compute_asam(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob)
x[,-"mcname"] %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
x[,-"mcname"] %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
?lm
a <- add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$y
a
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
b <- add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$exposure
ww <- add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$ipw_wt
lm(a ~ b, weights = ww)
lm(a ~ b, weights = ww %>% abs())
lm(a ~ b, weights = ww %>% abs())$fitted
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
b
ww
lm(a ~ as.numeric(levels(b))[b], weights = ww %>% abs())$fitted
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$ipw_wt * add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$y
mean(add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$ipw_wt * add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$y)
112.54761407 / sum(add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$ipw_wt * add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")$y)
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(ipw = (ipw_wt * y) / sum(ipw_wt * y))
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(ipw = (ipw_wt * y) / sum(ipw_wt * y)) %>% dplyr::summarise(IPW = sum(ipw))
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(ipw = (ipw_wt * y))
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(ipw = sum(ipw_wt * y))
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(ipw = sum(ipw_wt * y) / n())
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(ipw = sum(ipw_wt * y) / dplyr::n())
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::summarise(IPW = mean(ipw_wt * y))
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::summarise(IPW = sum(ipw_wt * y))
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(IPW = ipw_wt * y)
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(IPW = (ipw_wt * y) / dplyr::n())
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::mutate(IPW = (ipw_wt * y) / dplyr::n()) %>% dplyr::summarise(sum(IPW))
library(propensityml)
add_iptw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
?add_iptw
library(propensityml)
add_iptw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_asam(x[,-"mcname"], treatment = "exposure", outcome = "y", exclude = c("exposure_prob"), formula = exposure ~ . - y - exposure_prob)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
x$"mcname"
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_asam(x[,-"mcname"], treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x[,-"mcname"], treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = "mcname")
?tidy_moment
add_iptw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
?compute_ipw
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_iptw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::summarise(ipw = sum(iptw))
?add_ipw_wt
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
add_ipw_wt(x, treatment = "exposure", formula = exposure ~ . - y - exposure_prob, mc = "mcname") %>% dplyr::group_by(mcname) %>% dplyr::summarise(ipw = mean(ipw_wt * y))
compute_ipw(x[,-"mcname"], treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
compute_sipw(x[,-"mcname"], treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
?compute_ipw
x
x[,.N,by = mcname]
sc
x[,sc := rep(1:5, each = 20), by = mcname]
x
compute_ipw(x[,-"mcname"], treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
compute_ipw(x[,-"sc"], treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
x[,.N, by = .(mcname, sc)]
x[,.N, by = .(sc, mcname)]
x[,.N, by = .(mcname, sc)]
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
warnings()
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc"))
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
x
compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc"))
x
?merge
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc"))
x
y <- sim_outcome(1000)
z <- sim_outcome(1000)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf")
z
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
compute_ipw(x[,-c("mcname", "sc")], treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
z <- sim_outcome(1000)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
z <- sim_outcome(1000)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
z <- sim_outcome(1000)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
set.seed(1)
z <- sim_outcome(1000)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
z <- sim_outcome(1000)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
z <- sim_outcome(1000)
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
merge(z, compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob))
paste0("IPW", c("mean", "var"), sep = ".")
paste0("IPW", c("mean", "var"), collapse = ".")
paste0("IPW", c(".mean", ".var"))
x
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob) %>% .[]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
x
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
compute_asam(x, treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "ipw_wt"), formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
x
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
compute_ipw(z, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob)
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc"))
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc")) %>% data.table::melt(id.vars = c("mcname", "sc", "exposure", "y", "exposure_prob"))
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc")) %>% data.table::melt(id.vars = c("mcname", "sc", "exposure", "y", "exposure_prob", "IPW"))
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc")) %>% data.table::melt(id.vars = c("IPW"))
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc")) %>% data.table::melt(id.vars = c("mcname", "sc", "exposure", "y", "exposure_prob", "IPW"))
?melt
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc")) %>% data.table::melt(id.vars = c("mcname", "sc", "exposure", "y", "exposure_prob", "IPW"), value.factor = T)
(merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc")) %>% data.table::melt(id.vars = c("mcname", "sc", "exposure", "y", "exposure_prob", "IPW"))) %>% .[, value] %>% class
merge(x, compute_ipw(x, treatment = "exposure", outcome = "y", formula = exposure ~ . - y - exposure_prob, method = "rf", mc = c("mcname", "sc")), by = c("mcname", "sc"))
?setdiff
colnames(x)
setdiff(colnames(x), c("exposure_prob", "mcname", "sc"))
library(propensityml)
x
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
warnings()
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
warnings()
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"))
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
x
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
x
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
x
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
warnings()
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc")) %>% .[]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"), method = "rf") %>% .[]
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"), method = "rf")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"), method = "rf") %>% seq_along()
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"), method = "rf")
x$w5 %>% class
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"), method = "rf")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = c("mcname", "sc"), method = "rf")$w5
x %>% dplyr::mutate(w5 = as.numeric(levels(w5))[w5])
library(propensityml)
x <- sim_outcome(1000)
x
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
x
x %>% apply(2, class)
x
x$w1 %>% class
apply(x, 2, class)
apply(x, 1, class)
apply(x, 2, class)
library(propensityml)
x
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
sapply(x, class)
sapply(x, class) %>% names()
sapply(x, class)["w1"]
sapply(x, class)[c("w1", "w2")]
sapply(x, class)[c("w1", "w2")]
sapply(x, class)[sapply(x, class) == "factor"]
names(sapply(x, class)[sapply(x, class) == "factor"])
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)$wt %>% class
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)$w1 %>% class
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)$w5 %>% class
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)$exposure %>% class
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
1.3857179 * (-13.50615)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
x
1.3857179 * (-13.50615)
compute_balance(x, treatment = "exposure", outcome = "y")
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
?compute_balance
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
x
?mc_setoguchi
z <- mc_setoguchi(10, 1000)
z
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
?compute_balance
z %>% dplyr::group_by(mcname) %>%  compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z %>% dplyr::group_by(mcname) %>%  compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
z %>% dplyr::group_by(mcname) %>%  compute_asam(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
x
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob") %>% .[]
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
z
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob") %>% .[]
x
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob") %>% .[]
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob") %>% .[]
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
?rlang::sym
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
?ensym
library(propensityml)
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname") %>% .[]
compute_balance(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", mc = "mcname")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
z %>% dplyr::group_by(mcname) %>% compute_balance(treatment = "exposure", outcome = "y", exclude = "exposure_prob")
z
z %>% dplyr::group_by(mcname) %>% compute_balance(treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"))
z %>% tibble::tibble() %>% dplyr::group_by(mcname) %>% compute_balance(treatment = "exposure", outcome = "y", exclude = "exposure_prob")
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z %>% dpyr::group_by(mcname) %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z %>% dpylr::group_by(mcname) %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z %>% dplyr::group_by(mcname) %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob")
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
z[mcname == 1]
library(propensityml)
compute_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc = "mcname")
library(propensityml)
library(propensityml)
library(propensityml)
x <- sim_outcome(1000)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
x
z <- mc_setoguchi(10, 100)
z
?stop
x
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(data.table)
x
z
z[,]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, compute_asam, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob), by = mcname]
z[,lapply(.SD, function(x) {.SD %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
z[,lapply(.SD, function(x) {x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
x[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})]
x %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob) %>% as.numeric()}), by = mcname]
z
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = get(exposure) ~ . - get(y) - get(exposure_prob)) %>% as.numeric()}), by = mcname]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, compute_asam, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob), by = mcname]
library(propensityml)
z[,lapply(.SD, compute_asam, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob), by = mcname]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
library(propensityml)
x <- sim_outcome(1000)
z <- mc_setoguchi(10, 100)
z
z[,lapply(.SD, function(i) {i %>% compute_asam(treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}), by = mcname]
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
?compute_asam
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
z
z[scenario == ]
z[scenario == 1]
z[mcname == 1]
z
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
lapply(1:10, function(mc) {compute_asam(x[mcname == mc], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})
lapply(1:10, function(mc) {compute_asam(z[mcname == mc], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})
compute_asam(z[mcname == 1], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
z[mcname == 1]
compute_asam(z[mcname == 1], treatment = "exposure", outcome = "y", exclude = c("exposure_prob", "mcname"), formula = exposure ~ . - y - exposure_prob)
compute_asam(z[mcname == 1, -"mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)})
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% data.table::rbindlist()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% data.table::rbindlist() %>% mean()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% data.table::rbindlist() %>% colMeans()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% mean()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% unlist()
lapply(1:10, function(mc) {compute_asam(z[mcname == mc, - "mcname"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob)}) %>% unlist() %>% mean()
?parallel::mclapply
dt
library(propensityml)
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname") %>% .[]
library(propensityml)
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname") %>% .[]
mc_asam(z, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
usethis::use_package("parallel")
library(propensityml)
library(propensityml)
doMC::registerDoMC(4)
small_list <- foreach(scenario = c("A", "B", "F", "G"), .combine = rbind) %dopar% {
mc_setoguchi(N = 10, n_dat = 100, scenario = scenario, parallel = TRUE)[,
scenario := scenario]
}
small_list <- foreach::foreach(scenario = c("A", "B", "F", "G"), .combine = rbind) foreach::`%dopar%` {
mc_setoguchi(N = 10, n_dat = 100, scenario = scenario, parallel = TRUE)[,
scenario := scenario]
}
?foreach::`%dopar%`
library(foreach)
doMC::registerDoMC(4)
small_list <- foreach(scenario = c("A", "B", "F", "G"), .combine = rbind) %dopar% {
mc_setoguchi(N = 10, n_dat = 100, scenario = scenario, parallel = TRUE)[,
scenario := scenario]
}
small_list
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
z[,mcname] %>% unique()
small_list[,mcname] %>% unique()
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
small_list
small_list[scenario == "A"]
small_list[scenario == "A"][mcname == 1]
small_list[scenario == "A"]
small_list[scenario == "A", .SD, .SDcols = -"scenario"]
small_list[scenario == "A", .SD, .SDcols = -"scenario"][mcname == 1]
small_list[scenario == "A", .SD, .SDcols = -"scenario"][mcname == 1] %>% nrow()
small_list[scenario == "A"][mcname == 1] %>% nrow()
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario") %>% .[,.(mean(asam)), by = SC]
x
library(propensityml)
mc_asam(small_list, treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname", sc_col = "scenario")
library(propensityml)
small_list[,-"scenario"]
mc_asam(small_list[,-"scenario"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
library(propensityml)
mc_asam(small_list[,-"scenario"], treatment = "exposure", outcome = "y", exclude = "exposure_prob", formula = exposure ~ . - y - exposure_prob, mc_col = "mcname")
