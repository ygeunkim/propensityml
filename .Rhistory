?usethis::use_mit_license
?usethis::find_name
usethis
usethis::use_mit_license()
usethis::use_mit_license(name = "Young Geun Kim")
?roxygen2::roxygenize()
?roxygen2::roxygenise
roxygen2::roxygenize()
?usethis::use_package_doc
?usethis::use_github_links
usethis::use_github_links("https://github.com/ygeunkim")
?usethis::browse_github_token
library(propensityml)
?propensityml::`propensityml-package`
library(propensityml)
?propensityml::`propensityml-package`
library(propensityml)
?propensityml::`propensityml-package`
?glm
?usethis::use_package
usethis::use_package("stats")
?mvtnorm::rmvnorm
usethis::use_package("magrittr")
usethis::use_package("data.table")
wcov <- diag(10)
wcov[1, 5] <- .2^2
wcov[2, 5] <- .9^2
wcov[3, 8] <- .2
wcov[4, 9] <- .9
wcov[lower.tri(wcov)] <- t(wcov)[lower.tri(wcov)]
wcov
wcov <- diag(10)
wcov[1, 5] <- .2
wcov[2, 5] <- .9
wcov[3, 8] <- .2
wcov[4, 9] <- .9
wcov[lower.tri(wcov)] <- t(wcov)[lower.tri(wcov)]
wcov
?kronecker
diag(1)
S1 <- diag(4)
S2 <- diag(3)
S3 <- diag(3)
kronecker(diag(10), S1)
S1
?kronecker
kronecker(diag(1), S1)
kronecker(S1, S2)
dim(S1)
dim(S2)
cbind(S1, S2)
S1
S2
Matrix::bdiag(S1, S2)
Matrix::bdiag(S1, S2, S3)
?Matrix::bdiag
Matrix::bdiag(4, 3)
Matrix::bdiag(c(1, 2), c(1, 2))
Matrix::bdiag(S1, S2, S3) %>% as.matrix()
as.matrix(Matrix::bdiag(S1, S2, S3))
Matrix::bdiag(4, 3)
Matrix::bdiag(S1, S2, S3)
?cov
usethis::use_package("Matrix")
rep(1, 10)
numeric(10)
?cov
bin
Matrix::bdiag(S1, S2, S3)
Matrix::bdiag(S1, S2, S3)[5,1]
Matrix::.bdiag(S1, S2, S3)
Matrix::.bdiag(list(S1, S2, S3))
Matrix::.bdiag(list(S1, S2, S3), S3)
Matrix::.bdiag(S1, S2, S3)
Matrix::bdiag(S1, S2, S3)
A <- Matrix::bdiag(S1, S2, S3)
A
matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0), nrow = 3)
A[5:7, 1:4]
A[5:7, 1:4] <- matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0), nrow = 3)
dim(matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0), nrow = 3))
dim(matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0), nrow = 3))
A[5:7, 1:4] <- matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0), nrow = 3)
A
A <- Matrix::bdiag(S1, S2, S3)
A
matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0), nrow = 3)
matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0), nrow = 3)
matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0), nrow = 3)
matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0), nrow = 3)
dim(matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0), nrow = 3))
A[5:7, 1:4] <- matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0), nrow = 3)
A
matrix(nrow = 3, ncol = 4)
matrix(0L nrow = 3, ncol = 4)
matrix(0L, nrow = 3, ncol = 4)
build_covariate <- function(sig = rep(1, 10), confounder_exposure = matrix(0L, nrow = 3, ncol = 4), confounder_outcome = matrix(0L, nrow = 3, ncol = 4), exposure_outcome = matrix(0L, nrow = 3, ncol = 3)) {
confounder <- diag(sig[1:4])
exposure <- diag(sig[5:7])
outcome <- diag(sig[8:10])
x <- bdiag(confounder, exposure, outcome)
x[5:7, 1:4] <- confounder_exposure
x[8:10, 1:4] <- confounder_outcome
x[8:10, 5:7] <- exposure_outcome
x[lower.tri(x)] <- t(x)[lower.tri(x)]
return(x)
}
build_covariate()
library(Matrix)
build_covariate()
build_covariate()
build_covariate(confounder_exposure = matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0), nrow = 3))
A
A[lower.tri(A)]
lower.tri(A)
?Matrix::`as.matrix,Matrix-method`
x <- as.matrix(bdiag(confounder, exposure, outcome))
build_covariate <- function(sig = rep(1, 10), confounder_exposure = matrix(0L, nrow = 3, ncol = 4), confounder_outcome = matrix(0L, nrow = 3, ncol = 4), exposure_outcome = matrix(0L, nrow = 3, ncol = 3)) {
confounder <- diag(sig[1:4])
exposure <- diag(sig[5:7])
outcome <- diag(sig[8:10])
x <- as.matrix(bdiag(confounder, exposure, outcome))
x[5:7, 1:4] <- confounder_exposure
x[8:10, 1:4] <- confounder_outcome
x[8:10, 5:7] <- exposure_outcome
x[lower.tri(x)] <- t(x)[lower.tri(x)]
return(x)
}
build_covariate()
build_covariate(confounder_exposure = matrix(c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0), nrow = 3))
?Matrix::kronecker()
?Matrix::kronecker
S1
S2
S3
kronecker(S1, S2)
diag(4)
rbind(diag(4), matrix(0L, nrow = 3, ncol = 4))
rbind(diag(4), matrix(0L, nrow = 3, ncol = 4), matrix(0L, nrow = 3, ncol = 4))
?kronecker
bdiag(S1, S2, S3)
bdiag(S1, S2, S3)[5:7, 1:4]
A
A[5:7,1:4]
A[5:7,1:4][1:12]
A[5:7,1:4][6]
A[5:7,1:4][5]
rep(1L, 10)
A
A <- bdiag(S1, S2, S3)
A[5:7, 1:4] <- c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0)
A
?t
?Matrix::`t,CsparseMatrix-method`
A[lower.tri(A)]
?Matrix::`symmetricMatrix-class`
symmpart(A)
symmpart(A) * 2
symmpart(A)
A[5:7, 1:4] <- c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0) / 2
A
symmpart(A) * 2
symmpart(A) / 2
A
A[5:7, 1:4] <- c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0) * 2
symmpart(A) * 2
symmpart(A) /2
?symnum
?`symmetricMatrix-class`
isSymmetric(A)
as.Symmetric(A)
A
A[5:7, 1:4] <- c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0)
A
signature(A, to = "symmetricMatrix")
forceSymmetric(A)
coerce(A)
coerce(A, to = "symmetricMatrix")
coerce(A, from = "ddiMatrix", to = "symmetricMatrix")
symmpart(A)
A[5:7, 1:4] <- c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0)
symmpart(A)
A[5:7, 1:4] <- c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0) / 2
symmpart(A)
A[5:7, 1:4] <- c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0) * 2
symmpart(A)
build_covariate <- function(sig = rep(1L, 10), confounder_exposure = rep(0L, 12), confounder_outcome = rep(0L, 12), exposure_outcome = rep(0L, 9)) {
confounder <- diag(sig[1:4])
exposure <- diag(sig[5:7])
outcome <- diag(sig[8:10])
x <- bdiag(confounder, exposure, outcome)
x[5:7, 1:4] <- confounder_exposure * 2
x[8:10, 1:4] <- confounder_outcome * 2
x[8:10, 5:7] <- exposure_outcome * 2
x <- symmpart(x)
return(x)
}
build_covariate()
build_covariate(confounder_exposure = c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0))
build_covariate <- function(sig = rep(1L, 10),
confounder_exposure = c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0),
confounder_outcome = c(0, 0, 0, 0, 0, 0, .2, 0, 0, 0, .9, 0),
exposure_outcome = rep(0L, 9)) {
confounder <- diag(sig[1:4])
exposure <- diag(sig[5:7])
outcome <- diag(sig[8:10])
x <- bdiag(confounder, exposure, outcome)
x[5:7, 1:4] <- confounder_exposure * 2
x[8:10, 1:4] <- confounder_outcome * 2
x[8:10, 5:7] <- exposure_outcome * 2
x <- symmpart(x)
return(x)
}
build_covariate()
bdiag(S1, S2, S3)
sqrt(bdiag(S1, S2, S3))
build_covariate <- function(sig = rep(1L, 10),
confounder_exposure = c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0),
confounder_outcome = c(0, 0, 0, 0, 0, 0, .2, 0, 0, 0, .9, 0),
exposure_outcome = rep(0L, 9),
value_cor = TRUE) {
confounder <- diag(sig[1:4])
exposure <- diag(sig[5:7])
outcome <- diag(sig[8:10])
S <- bdiag(confounder, exposure, outcome)
x <- S
x[5:7, 1:4] <- confounder_exposure * 2
x[8:10, 1:4] <- confounder_outcome * 2
x[8:10, 5:7] <- exposure_outcome * 2
x <- symmpart(x)
if (value_cor) {
sqrt(S) %*% x %*% sqrt(S)
} else {
x
}
}
build_covariate()
library(mvtnorm)
library(data.table)
source('~/Documents/GitHub/propensityml/R/simdata.R', echo=TRUE)
source('~/Documents/GitHub/propensityml/R/simdata.R', echo=TRUE)
source('~/Documents/GitHub/propensityml/R/simdata.R', echo=TRUE)
sim_outcome()
source('~/Documents/GitHub/propensityml/R/utils-pipe.R', echo=TRUE)
sim_outcome()
library(tidyverse)
sim_outcome()
rmvnorm(10, sigma = build_covariate())
source('~/Documents/GitHub/propensityml/R/simdata.R', echo=TRUE)
rmvnorm(10, sigma = build_covariate())
sim_outcome()
sim_outcome(10)
library(propensityml)
?propensityml::sim_outcome
build_covariate()
build_covariate() %>% as_tibble()
build_covariate() %>% as.data.frame()
build_covariate() %>% as.matrix()
build_covariate() %>% as.matrix() %>% data.table()
build_covariate()
build_covariate <- function(sig = rep(1L, 10),
confounder_exposure = c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0),
confounder_outcome = c(0, 0, 0, 0, 0, 0, .2, 0, 0, 0, .9, 0),
exposure_outcome = rep(0L, 9),
value_cor = TRUE) {
confounder <- diag(sig[1:4])
exposure <- diag(sig[5:7])
outcome <- diag(sig[8:10])
S <- bdiag(confounder, exposure, outcome)
x <- S
x[5:7, 1:4] <- confounder_exposure * 2
x[8:10, 1:4] <- confounder_outcome * 2
x[8:10, 5:7] <- exposure_outcome * 2
x <- symmpart(x)
if (value_cor) {
S^{-1/2} %*% x %*% S^{-1/2}
} else {
x
}
}
build_covariate()
diag(4)
(diag(4))^{-1/2}
build_covariate <- function(sig = rep(1L, 10),
confounder_exposure = c(.2, 0, 0, 0, .9, 0, 0, 0, 0, 0, 0, 0),
confounder_outcome = c(0, 0, 0, 0, 0, 0, .2, 0, 0, 0, .9, 0),
exposure_outcome = rep(0L, 9),
value_cor = TRUE) {
confounder <- diag(sig[1:4])
exposure <- diag(sig[5:7])
outcome <- diag(sig[8:10])
S <- bdiag(confounder, exposure, outcome)
x <- S
x[5:7, 1:4] <- confounder_exposure * 2
x[8:10, 1:4] <- confounder_outcome * 2
x[8:10, 5:7] <- exposure_outcome * 2
x <- symmpart(x)
if (value_cor) {
sqrt(S) %*% x %*% sqrt(S)
} else {
x
}
}
?lm
?glm
library(propensityml)
?ps_glm
library(propensityml)
?ps_glm
library(propensityml)
?ps_glm
causal_table <- tibble::tribble(
~y0, ~y1, ~z, ~y, ~n, #---|----|--|---|------ 0, 0, 0, 0, 50,
0, 0, 1, 0, 100, 0, 1, 0, 0, 100, 0, 1, 1, 1, 50,
1, 0,0,1,0,
1
1,   0,  1,  0,  50,
1,   1,  0,  1,  100,
1,   1,  1,  1,  150
)
causal_table <- tibble::tribble(
~y0, ~y1, ~z, ~y, ~n, 0, 0, 0, 0, 50,
0, 0, 1, 0, 100, 0, 1, 0, 0, 100, 0, 1, 1, 1, 50,
1, 0,0,1,0,
1
1,   0,  1,  0,  50,
1,   1,  0,  1,  100,
1,   1,  1,  1,  150
)
causal_table <- tibble::tribble(
~y0, ~y1, ~z, ~y, ~n, 0, 0, 0, 0, 50,
0, 0, 1, 0, 100, 0, 1, 0, 0, 100, 0, 1, 1, 1, 50,
1, 0,0,1,0,
1
1,   0,  1,  0,  50,
1,   1,  0,  1,  100,
1,   1,  1,  1,  150
)
y0 <- c(rep(0, 4), rep(1, 4))
y0
y1 <- c(rep(0, each = 2), rep(1, each = 1))
y1
y1 <- c(rep(0, each = 2), rep(1, each = 2))
y1 <- rep(c(rep(0, each = 2), rep(1, each = 2)), 2)
y1
z
z <- rep(c(0, 1), 4)
z
y <- c(0, 0, 0, 1, 1, 0, 1, 1)
length(y)
?ARMAtoMA
ARMAtoMA(ar=c(1.0, -0.25),ma=c(1), lag.max=10)
ARMAtoMA(ar=c(1.0, -0.25),ma=c(1), lag.max=10) %>% class
ARMAtoMA(ar=c(1.0, -0.25),ma=c(1), lag.max=10) %>% equatiomatic::extract_eq()
?ARMAacf
ARMAtoMA(ar=c(1.0, -0.25),ma=1, lag.max=10)
N
N <- c(50, 100, 100, 50, 0, 50, 100, 150)
length(N)
causal_table <- tibble::tibble(y0 = y0, y1 = y1, z = z, y = y, n = N)
causal_table
?usethis::use_data
?usethis::use_data_table
?usethis::use_data_raw
usethis::use_package("tibble")
?tibble::`tibble-package`
usethis::use_package("dplyr")
causal_table
outcome_frame <- causal_table
outcome_frame
usethis::use_data(outcome_frame)
?iris
?ggplot2::diamonds
library(propensityml)
