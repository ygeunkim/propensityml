compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable] %>% setNames(c("variable", "balance"))
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable]
x %>% compute_balance(col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
compute_balance <- function(data, col_name = "balance", treatment, outcome) {
data %>%
mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c("variable", col_name))
}
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
library(dplyr)
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
x <- sim_outcome(1000)
x
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
a <- as.numeric(x$w1)[x$w1]
var(a[x$exposure == 1])
var(a[x$exposure == 0])
a
a <- as.numeric(levels(x$w1))[x$w1]
var(a[x$exposure == 1])
var(a[x$exposure == 0])
tidy_moment(x, treatment = "exposure", col_exclude = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
?dcast
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")[]
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast(exposure + variable ~ moment)
a <- "exposure"
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast(a + variable ~ moment)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast((a) + variable ~ moment)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast(eval(a) + variable ~ moment)
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
mean(compute_balance(x, treatment = "exposure", outcome = "outcome_prob")$balance)
abs(compute_balance(x, treatment = "exposure", outcome = "outcome_prob")$balance)
mean(abs(compute_balance(x, treatment = "exposure", outcome = "outcome_prob")$balance))
library(propensityml)
compute_asm(x, treatment = "exposure", outcome = "outcome_prob")
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
library(propensityml)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
chemical
compute_ipw
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
?sym
usethis::use_package("rlang")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chechemical
chemical
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", trt_indicator = 1, outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_sipw(chemical, treatment = "poisox", trt_indicator = 1, outcome = "blood", formula = poisox ~ age + sex, method = "logit")
?sum
?ungroup
library(propensityml)
compute_sipw(chemical, treatment = "poisox", trt_indicator = 1, outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
x <- sim_outcome(100)
x
x %>% ps_cart(exposure ~ . -outcome_prob, data = .)
a <- x %>% ps_cart(exposure ~ . -outcome_prob, data = .)
a
plot(a)
plot(a$model)
rpart::plotcp(a$model)
summary(a$model)
names(a$model)
where(a$model)
a$model$where
rpart::printcp(a$model)
?rpart::prune
install.packages("rpart.plot")
?rpart.plot::prp
rpart.plot::prp(a$model)
a
x %>% tibble::tibble()
c("treated", "untreated")[x$exposure]
rpart.plot::prp(a$model, box.col = c("treated", "untreated")[x$exposure])
a$model$frame$yval
c("treated", "untreated")[a$model$frame$yval]
rpart.plot::prp(a$model, box.col = c("treated", "untreated")[a$model$frame$yval])
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval])
c("pink", "palegreen3")[a$model$frame$yval]
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], roundint = FALSE)
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], faclen = 0)
a$model$frame$n
paste(a$model$frame$n)
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], roundint = FALSE)
?phyloseq::plot_tree
phyloseq::plot_tree(a$model)
?phyloseq::prune_taxa
phyloseq::phy_tree(a$model)
a$model %>% ggplot2::autoplot()
x %>% ps_rf(exposure ~ . -outcome_prob, data = .)
(x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model
(x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model %>% plot
(x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model %>% ggplot2::autoplot()
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], roundint = FALSE)
phyloseq::plot_tree((x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model)
phyloseq::plot_tree((x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model %>% phyloseq::phy_tree())
?phyloseq::phy_tree()
phyloseq::phy_tree(a$model)
rpart::printcp(a$model)
?rpart::plotcp
rpart::plotcp(a$model)
rpart::printcp(a$model)
rpart::printcp(a$model) %>% names()
rpart::printcp(a$model) %>% class
rpart::printcp(a$model)[,1]
rpart::printcp(a$model) %>% invisible()
a$model$cptable
(chemical %>% ps_rf(poisox ~ age + sex, data = .))$model
(chemical %>% ps_cart(poisox ~ age + sex, data = .))$model
(chemical %>% ps_cart(poisox ~ age + sex, data = .))$model$cptable
a$model$cptable
?rpart::printcp
a$model$csplit
a$model$cptable
a$model$cptable[,"xerror"]
?rpart::plotcp
?stop
a$model$cptable
a$model$cptable %>% class()
a$model$cptable %>% as.data.frame()
?ggplot2::geom_errorbar
library(propensityml)
plot_cp(a)
library(propensityml)
plot_cp(a)
library(propensityml)
plot_cp(a)
rpart::plotcp(a$model)
?ggplot2::geom_errorbar
library(propensityml)
plot_cp(a)
?ggplot2::geom_pointrange
library(propensityml)
plot_cp(a)
plot_cp(a, col = "red")
a
?rpart::prune
plot_cp(chemical %>% ps_glm(poisox ~ age + sex, data = .))
library(propensityml)
ps_prune(a, 2)
ps_prune(a, 2)$model
ps_prune(a, 2)$model %>% names
ps_prune(a, 2)$model %>% class
ps_prune(a, 3)
library(propensityml)
usethis::use_package("ggplot2")
library(propensityml)
?var
?mean
?var
library(propensityml)
?rpart::prune
library(propensityml)
?data.table::data.table
?`data.table-class`
?data.table::`data.table-class`
?glmnet::glmnet
foreach::foreach(i = 1:5, .combine = list) foreach::`%do%` {1:5}
?foreach::foreach
foreach::foreach(i = 1:5, .combine = list) %do% {1:5}
?sim_outcome
library(propensityml)
usethis::use_package("foreach")
library(propensityml)
library(propensityml)
mc_setoguchi(N = 100)
mc_setoguchi(N = 100, n_dat = 10)
mc_setoguchi(N = 10, n_dat = 10)
sim_outcome(10)
data.table::rbindlist(sim_outcome(10), sim_outcome(10))
data.table::rbindlist(list(sim_outcome(10), sim_outcome(10)))
?data.table::rbind
?data.table::rbind.data.table
library(propensityml)
mc_setoguchi(N = 10, n_dat = 10)
library(propensityml)
?doMC::registerDoMC
doMC::registerDoMC(cores = 10)
mc_setoguchi(N = 10, n_dat = 100)
library(propensityml)
library(propensityml)
x <- sim_outcome(1000)
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
x <- sim_outcome(5000)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
x <- sim_outcome(1000)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
library(propensityml)
library(propensityml)
x <- sim_outcome(1000)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "rf")
x[, mcname := rep(100, each = 10)]
x
library(data.table)
x[, mcname := rep(100, each = 10)]
rep(100, each = 10) %>% length()
x[, mcname := rep(1:100, each = 10)]
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "rf")
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
?estimate_ps
x[, propensity := ps_glm(exposure ~ . - outcome_prob, data = .SD) %>% estimate_ps(), by = mcname]
x[, propensity := ps_glm(exposure ~ . - outcome_prob, data = .SD) %>% estimate_ps(), by = mcname, .SDcols = .mcname]
x[, propensity := ps_glm(exposure ~ . - outcome_prob, data = .SD) %>% estimate_ps(), by = mcname, .SDcols = "mcname"]
x[, propensity := ps_glm(exposure ~ . - outcome_prob - mcname, data = .SD) %>% estimate_ps(), by = mcname]
x
x <- sim_outcome(1000)
x[, mcname := rep(1:100, each = 10)]
x[, propensity := ps_glm(exposure ~ . - outcome_prob - mcname, data = .SD) %>% estimate_ps(), by = mcname]
x <- sim_outcome(1000)
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
x
x
x[, mcname := rep(1:100, each = 10)]
x
x <- sim_outcome(1000)
x
?set
x[, .N]
x[, mcname := rep(1:100, each = 10)]
x[, .N]
x[, .N, by = NULL]
x[, .N, by = NA]
x[, .N, by = NULL]
x[, .N, by = mcnae]
x[, .N, by = mcname]
library(propensityml)
x <- sim_outcome(1000)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
mc
library(propensityml)
x
x[, mcname := rep(1:100, each = 10)]
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit", mc = "mcname")
library(propensityml)
x
x
x
x <- sim_outcome(1000)
x
x[, mcname := rep(1:100, each = 10)]
x
x[mcname == 1]
?estimate_ps
x[mcname == 1] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% head()
x[mcname == 2] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% head()
x[mcname == 2]
x[mcname == 1] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% tail()
x[mcname == 2] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% tail()
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit", mc = "mcname")
x
set.seed()
set.seed(1)
x <- sim_outcome(1000)
x[, mcname := rep(1:100, each = 10)]
x[mcname == 1] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% tail()
x[mcname == 2] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% tail()
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit", mc = "mcname")
x
x[mcname == 1, propensity] %>% tail()
x[mcname == 2, propensity] %>% tail()
x <- sim_outcome(1000)
library(propensityml)
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit", mc = "mcname")
x <- sim_outcome(1000)
x[, mcname := rep(1:100, each = 10)]
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit", mc = "mcname")
library(propensityml)
x <- sim_outcome(1000)
x[, mcname := rep(1:100, each = 10)]
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit", mc = "mcname")
x <- sim_outcome(1000)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
x
x <- sim_outcome(1000)
y <- copy(chemical)
y %>% compute_ipw(treatment = poisox, outcome = blood, formula = poisox ~ age + sex)
y %>% data.table() %>% compute_ipw(treatment = poisox, outcome = blood, formula = poisox ~ age + sex)
y
y %>% compute_ipw(treatment = poisox, outcome = blood, formula = poisox ~ age + sex)
setDT(y)
y
y %>% compute_ipw(treatment = poisox, outcome = blood, formula = poisox ~ age + sex)
y %>% compute_ipw(treatment = poisox, outcome = blood, formula = poisox ~ age + sex, data = .)
y
library(propensityml)
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
x
y %>% compute_ipw(treatment = poisox, outcome = blood, formula = poisox ~ age + sex)
library(propensityml)
library(propensityml)
x <- sim_outcome(1000)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, method = "logit")
library(propensityml)
chemical
?compute_ipw
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical %>% add_propensity(poisox ~ age + sex)
chemical %>% add_propensity(formula = poisox ~ age + sex)
chemical %>% data.table::data.table() %>% add_propensity(formula = poisox ~ age + sex)
chemical %>% data.table::data.table() %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical
chemical %>% data.table::data.table() %>% compute_ipw(treatment = poisox, outcome = blood, formula = poisox ~ age + sex, method = "logit")
chemical %>% data.table::data.table() %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical %>% data.table::data.table() %>% add_propensity(formula = poisox ~ age + sex)
chemical %>% data.table::data.table() %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
chemical %>% data.table::data.table() %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
chemical %>% data.table::data.table() %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
library(propensityml)
chemical %>% data.table::data.table() %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
data.table::is.data.table(chemical)
data.table::copy(chemical)
data.table::copy(chemical %>% data.table::data.table())
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical %>% add_propensity(formula = poisox ~ age + sex)
chemical
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit") %>% .[]
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit") %>% .[]
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
?eval
library(propensityml)
?eval
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
?get
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical
library(propensityml)
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
x
x[, mcname := rep(100, each = 10)]
x
x <- sim_outcome(1000)
x[, mcname := rep(1:100, each = 10)]
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, method = "logit", mc = "mcname")
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, method = "logit", mc = list(mcname))
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = list(mcname))
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = mcname)
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = "mcname")
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = "mcname")
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = "mcname")
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, mc = "mcname")
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - outcome_prob, mc = "mcname")
x
x[, propensity := ps_glm(exposure ~ . - outcome_prob) %>% estimate_ps(), by = mcname]
x
x[, propensity := ps_glm(exposure ~ . - outcome_prob, data = .SD) %>% estimate_ps(), by = mcname]
x
x <- sim_outcome(1000)
x[, mcname := rep(1:100, each = 10)]
x
x[, propensity := ps_glm(.SD$exposure ~ .SD$. - .SD$outcome_prob) %>% estimate_ps(), by = mcname]
x
x[, lapply(.SD, function(dat) {ps_glm(exposure ~ . - outcome_prob, data = dat) %>% estimate_ps()}), by = mcname]
x
?lm
?ps_glm
x %>% ps_glm(exposure ~ . - outcome_prob) %>% estimate_ps()
x %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps()
(x %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps()) %>% class
(x %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps()) %>% length()
x %>% class()
library(data.table)
x[, propensity := ps_glm(.SD$exposure ~ .SD$. - .SD$outcome_prob) %>% estimate_ps(), by = mcname]
x[, propensity := ps_glm(exposure ~ . - outcome_prob, data = .SD) %>% estimate_ps(), by = mcname]
x
library(propensityml)
x <- sim_outcome(1000)
x[, mcname := rep(1:100, each = 10)]
x %>% add_propensity(formula = exposure ~ . - outcome_prob, mc = "mcname")
x
x <- sim_outcome(1000)
x %>% add_propensity(formula = exposure ~ . - outcome_prob)
x
x[, mcname := rep(1:100, each = 10)]
x[, mcname := rep(1:10, each = 100)]
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, mc = "mcname")
x %>% compute_ipw(treatment = "exposure", outcome = "outcome_prob", formula = exposure ~ . - outcome_prob, mc = "mcname")
library(propensityml)
library(propensityml)
x %>% compute_sipw(treatment = "exposure", outcome = "outcome_prob", formula = exposure ~ . - outcome_prob, mc = "mcname")
library(propensityml)
?sum
x %>% compute_sipw(treatment = "exposure", outcome = "outcome_prob", formula = exposure ~ . - outcome_prob, mc = "mcname")
library(propensityml)
x <- sim_outcome(1000)
x[, mcname := rep(1:10, each = 100)]
x
x %>% add_propensity(formula = exposure ~ . - outcome_prob, mc = "mcname")
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = "mcname")
library(propensityml)
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = "mcname")
?ps_glm
add_propensity
x %>% add_propensity(formula = exposure ~ . - outcome_prob - mcname, mc = "mcname")
?data.table::.SD
x
?key
x
library(data.table)
x
x[, lapply(.SD, function(x) {ps_glm(exposure ~ . - outcome_prob - mcname, data = x) %>% estimate_ps()}), by = mcname]
x
x[, lapply(.SD, function(x) x), by = mcname]
x
x[, lapply(.SD, function(x) {ps_glm(x$exposure ~ x$. - x$outcome_prob - mcname) %>% estimate_ps()}), by = mcname]
x[, lapply(.SD, function(x) {ps_glm(exposure ~ . - outcome_prob - mcname, data = x) %>% estimate_ps()}), by = mcname]
x[, lapply(.SD, function(x) {ps_glm(exposure ~ . - outcome_prob, data = x) %>% estimate_ps()}), by = mcname]
x[, propensity := ps_glm(exposure ~ . - outcome_prob - mcname, data = .SD) %>% estimate_ps(), by = mcname]
x
x[, propensity := ps_glm(exposure ~ . - outcome_prob, data = .SD) %>% estimate_ps(), by = mcname]
x
set.seed(1)
x <- sim_outcome(1000)
x[, mcname := rep(1:10, each = 100)]
x[, propensity := ps_glm(exposure ~ . - outcome_prob - mcname, data = .SD) %>% estimate_ps(), by = mcname]
x[, lapply(.SD, function(x) {ps_glm(exposure ~ . - outcome_prob, data = x) %>% estimate_ps()}), by = mcname]
x[, propensity := ps_glm(exposure ~ . - outcome_prob, data = .SD) %>% estimate_ps(), by = mcname]
x
x
set.seed(1)
x <- sim_outcome(1000)
x[, mcname := rep(1:10, each = 100)]
x[mcname == 1] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% head()
x[mcname == 10] %>% ps_glm(exposure ~ . - outcome_prob, data = .) %>% estimate_ps() %>% tail()
x[mcname == 10]
x[mcname == 10] %>% ps_glm(exposure ~ . - outcome_prob, data = .)
x[mcname == 1] %>% ps_glm(exposure ~ . - outcome_prob - mcname, data = .) %>% estimate_ps() %>% head()
x[mcname == 10] %>% ps_glm(exposure ~ . - outcome_prob - mcname, data = .) %>% estimate_ps() %>% tail()
?.SD
library(propensityml)
?add_propensity
library(propensityml)
