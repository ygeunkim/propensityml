?usethis::use_test
usethis::use_testthat()
?testthat::context
library(testthat)
?expect_type
chemical
chemical %>% ps_glm(poisox ~ age + sex, data = .)
chemical %>% ps_glm(poisox ~ age + sex, data = .) %>% class
(chemical %>% ps_glm(poisox ~ age + sex, data = .))$model
expect_type((chemical %>% ps_glm(poisox ~ age + sex, data = .))$model, "glm")
?expect_type
expect_s3_class((chemical %>% ps_glm(poisox ~ age + sex, data = .))$model, "glm")
expect_s3_class(chemical %>% ps_glm(poisox ~ age + sex, data = .), "glm")
expect_s3_class(chemical %>% ps_glm(poisox ~ age + sex, data = .), "propmod")
expect_type(chemical %>% ps_glm(poisox ~ age + sex, data = .), "propmod")
chemical %>% ps_glm(poisox ~ age + sex, data = .)
chemical %>% ps_glm(poisox ~ age + sex, data = .) %>% length()
(chemical %>% ps_glm(poisox ~ age + sex, data = .))$model %>% class
(chemical %>% ps_rf(poisox ~ age + sex, data = .))$model %>% class
expect_s3_class((chemical %>% ps_glm(poisox ~ age + sex, data = .))$model, "randomForest")
expect_s3_class((chemical %>% ps_rf(poisox ~ age + sex, data = .))$model, "randomForest")
usethis::use_test()
library(propensityml)
?usethis::use_package
usethis::use_package("testthat", type = "Suggests")
library(propensityml)
?testthat
?testthat
?test_that
library(propensityml)
?usethis::use_package
usethis::use_package("covr", type = "Suggests")
?usethis::use_travis
usethis::use_travis()
library(propensityml)
library(propensityml)
library(propensityml)
?sim_outcome
(x <- sim_outcome(1000, covmat = build_covariate()))
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
out.width = "70%",
fig.align = "center",
fig.width = 6,
fig.asp = .618,
fig.pos = "H"
)
options(digits = 3)
(x <- sim_outcome(1000, covmat = build_covariate()))
x %>%
ps_glm(exposure ~ . -outcome_prob, data = .)
x %>%
ps_rf(exposure ~ . -outcome_prob, data = .)
(fit_rf <-
x %>%
ps_rf(exposure ~ . -outcome_prob, data = .))
names(fit_rf)
class(fit_rf)
estimate_ps(fit_rf)
estimate_ps(fit_rf) %>% head()
?estimate_ps
x
chemical
?covr::codecov
?usethis::use_github_action_check_standard
x
library(propensityml)
library(propensityml)
?compute_balance
x
compute_balance(x, "balance", outcome_prob, exposure)
compute_balance(x, "balance", "outcome_prob", "exposure")
x %>% colMeans()
x$w1 %>% class
x$w1 %>% mean
x$w1 %>% as.numeric()
x$w1 %>% readr::parse_number()
x %>% colSums()
x$w1 %>% as.numeric() %>% mean
x$w1 %>% as.numeric()
x$w1
as.numeric(levels(x$w1))
as.numeric(levels(x$w1))[x$w1]
library(propensityml)
x
compute_balance(x, "balance", "outcome_prob", "exposur")
compute_balance(x, "balance", "outcome_prob", "exposure")
x
x$w1 %>% class
library(propensityml)
compute_balance(x, "balance", "outcome_prob", "exposure")
library(data.table)
compute_moment <- function(x) {
if (is.factor(x)) x <- as.numeric(x)[x]
list(mean = mean(x), var = var(x))
}
x %>% compute_moment()
x %>% compute_moment("exposure", "outcome_prob")
x
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = "outcome_prob"]
x
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = "outcome_prob"] %>% melt(id.vars = -"outcome_prob")
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"] %>% melt(id.vars = "outcome_prob")
x[,unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"] %>% melt(id.vars = "exposure")
x %>% tidy_moment("exposure", "outcome_prob")
tidy_moment <- function(data, treatment, col_exclude) {
data[,
unlist(lapply(.SD, compute_moment)) %>% as.list(),
by = treatment,
.SDcols = -col_exclude] %>%
melt(id.vars = treatment) %>%
.[,
c("variable", "moment") := tstrsplit(variable, ".", fixed = TRUE)]
}
x %>% tidy_moment("exposure", "outcome_prob")
x %>% tidy_moment("exposure", "outcome_prob") %>% .[]
x
x %>% tidy_moment("exposure", "outcome_prob") %>% .[]
x %>% tidy_moment("exposure", "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = exposure]
?setNames
compute_balance <- function(data, col_name = "balance", outcome, treatment) {
data %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c(treatment, col_name))
}
x %>% compute_balance(outcome = "outcom_prob", treatment = "exposure")
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
compute_balance <- function(data, col_name = "balance", outcome, treatment) {
data %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c(treatment, col_name))
}
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
x %>% tidy_moment("exposure", "outcome_prob") %>% .[]
x %>% tidy_moment("exposure", "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = exposure]
x %>% tidy_moment("exposure", "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable]
x %>% compute_balance(outcome = "outcom_prob", treatment = "exposure")
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
var(x$w1[x$exposure == 1])
x$exposure == 1
var(x$w1[x$exposure == 1])
x$w1[x$exposure == 1]
as.numeric(x$w1[x$exposure == 1])
a
a <- as.numeric(x$w1)[x$w1]
a
a
x$w1
library(propensityml)
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
a <- as.numeric(levels(x$w1))[x$w1]
a
a[x$exposure == 1]
mean(a[x$exposure == 1])
var(a[x$exposure == 1])
var(a[x$exposure == 0])
var(a[x$exposure == 1]) / 2
tidy_moment(x, "exposure", "outcome_prob")
tidy_moment(x, "exposure", "outcome_prob")[]
tidy_moment(x, "exposure", "outcome_prob") %>% tidyr::spread(moment, value)
?dcast
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(moment ~ .)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(. ~ .)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(. ~ moment)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(value ~ moment)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment)
compute_balance <- function(data, col_name = "balance", outcome, treatment) {
data %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c(treatment, col_name))
}
x %>% compute_balance(outcome = "outcome_prob", treatment = "exposure")
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment)
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean)), by = variable]
.0221+.0297
-.0423+.0297
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% [order(variable)]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[order(variable)]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "%03d")]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "%s%03d")]
?sprintf
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "s%03d")]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "s%02d")]
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable] %>% .[,variable := sprintf(variable, fmt = "%s%02d")]
paste0("w", 0:7)
paste0("w", 0:7) %>% sprintf(fmt = "%03d")
paste0("w", 0:7) %>% sprintf(fmt = "%s%03d")
paste0("w", sprintf(0:7, fmt = "%03d"))
paste0("w", sprintf(0:7, fmt = "%02d"))
paste0("w", sprintf(8:10, fmt = "%02d"))
paste0("w", sprintf(8:10, fmt = "%03d"))
tidy_moment(x, "exposure", "outcome_prob") %>% dcast(exposure + variable ~ moment) %>% .[, .(balance = diff(mean) / sqrt(var[exposure == 1])), by = variable]
x
x %>% .[unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -outcome_prob]
x %>% .[unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
a <- as.numeric(levels(x$w1))[x$w1]
a
a[x$exposure == 1]
var(a[x$exposure == 1])
var(a[x$exposure == 0])
mean(a[x$exposure == 0])
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x$w2 %>% class
mean(x$w2[x$exposure == 1])
x %>% .[, lapply(.SD, compute_moment), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, as.list(lapply(.SD, compute_moment)), by = exposure, .SDcols = -"outcome_prob"]
var(a[x$exposure == 1])
is.factor(x$w1)
x %>% .[, as.list(lapply(.SD, compute_moment)) %>% list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, as.list(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% list(), by = exposure, .SDcols = -"outcome_prob"]
x %>% .[, unlist(lapply(.SD, compute_moment)) %>% as.list(), by = exposure, .SDcols = -"outcome_prob"]
var(a[x$exposure == 1])
is.factor(x$w8)
b <- as.numeric(levels(x$w8))[x$w8]
var(b[x$exposure == 0])
var(b[x$exposure == 1])
a <- as.numeric(levels(x$w1))[x$w1]
var(a[x$exposure == 0])
var(a[x$exposure == 1])
mean(a[x$exposure == 1])
mean(a[x$exposure == 0])
mean(b[x$exposure == 1])
mean(b[x$exposure == 0])
x$w1
a
x
install.packages(c("cli", "globals", "magrittr", "pillar", "RcppArmadillo", "vctrs"))
compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
levels(x$w1)
levels(x$w2)
levels(x$w8)
library(propensityml)
compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
tidy_moment(x, "exposure", "outcome_prob")
tidy_moment(x, "exposure", "outcome_prob")[]
library(propensityml)
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]})
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% apply(2, class)
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[]
?dplyr::mutate_if
library(propensityml)
x %>% compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[]
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable]
library(propensityml)
x %>% compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
?setNames
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable]
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>% setNames(c("variable", "balance"))
library(propensityml)
x %>% compute_balance(x, outcome = "outcome_prob", treatment = "exposure")
x %>% compute_balance(x, col_name = "balance", outcome = "outcome_prob", treatment = "exposure")
compute_balance(x, col_name = "balance", outcome = "outcome_prob", treatment = "exposure")
compute_balance(x, col_name = "balance", outcome = "outcome_prob", treatment = "exposure")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>% setNames(c("variable", "balance"))
library(propensityml)
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>% setNames(c("variable", "balance"))
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable] %>% setNames(c("variable", "balance"))
x %>% dplyr::mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>% tidy_moment(treatment = "exposure", col_exclude = "outcome_prob") %>% .[,.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)), by = variable]
x %>% compute_balance(col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
compute_balance <- function(data, col_name = "balance", treatment, outcome) {
data %>%
mutate_if(is.factor, function(x) {as.numeric(levels(x))[x]}) %>%
tidy_moment(treatment = treatment, col_exclude = outcome) %>%
.[,
.(balance = diff(value[moment == "mean"]) / sqrt(sum(value[moment == "var"]) / 2)),
by = variable] %>%
setNames(c("variable", col_name))
}
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
library(dplyr)
compute_balance(x, col_name = "balance", treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
x <- sim_outcome(1000)
x
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
a <- as.numeric(x$w1)[x$w1]
var(a[x$exposure == 1])
var(a[x$exposure == 0])
a
a <- as.numeric(levels(x$w1))[x$w1]
var(a[x$exposure == 1])
var(a[x$exposure == 0])
tidy_moment(x, treatment = "exposure", col_exclude = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
?dcast
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")[]
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast(exposure + variable ~ moment)
a <- "exposure"
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast(a + variable ~ moment)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast((a) + variable ~ moment)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob") %>% data.table::dcast(eval(a) + variable ~ moment)
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob", col_name = "a")
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
mean(compute_balance(x, treatment = "exposure", outcome = "outcome_prob")$balance)
abs(compute_balance(x, treatment = "exposure", outcome = "outcome_prob")$balance)
mean(abs(compute_balance(x, treatment = "exposure", outcome = "outcome_prob")$balance))
library(propensityml)
compute_asm(x, treatment = "exposure", outcome = "outcome_prob")
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_balance(x, treatment = "exposure", outcome = "outcome_prob")
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
library(propensityml)
library(propensityml)
compute_asam(x, treatment = "exposure", outcome = "outcome_prob")
library(propensityml)
chemical
compute_ipw
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chemical %>% compute_ipw(treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
?sym
usethis::use_package("rlang")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
chechemical
chemical
library(propensityml)
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
compute_ipw(chemical, treatment = "poisox", outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_ipw(chemical, treatment = "poisox", trt_indicator = 1, outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
compute_sipw(chemical, treatment = "poisox", trt_indicator = 1, outcome = "blood", formula = poisox ~ age + sex, method = "logit")
?sum
?ungroup
library(propensityml)
compute_sipw(chemical, treatment = "poisox", trt_indicator = 1, outcome = "blood", formula = poisox ~ age + sex, method = "logit")
library(propensityml)
x <- sim_outcome(100)
x
x %>% ps_cart(exposure ~ . -outcome_prob, data = .)
a <- x %>% ps_cart(exposure ~ . -outcome_prob, data = .)
a
plot(a)
plot(a$model)
rpart::plotcp(a$model)
summary(a$model)
names(a$model)
where(a$model)
a$model$where
rpart::printcp(a$model)
?rpart::prune
install.packages("rpart.plot")
?rpart.plot::prp
rpart.plot::prp(a$model)
a
x %>% tibble::tibble()
c("treated", "untreated")[x$exposure]
rpart.plot::prp(a$model, box.col = c("treated", "untreated")[x$exposure])
a$model$frame$yval
c("treated", "untreated")[a$model$frame$yval]
rpart.plot::prp(a$model, box.col = c("treated", "untreated")[a$model$frame$yval])
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval])
c("pink", "palegreen3")[a$model$frame$yval]
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], roundint = FALSE)
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], faclen = 0)
a$model$frame$n
paste(a$model$frame$n)
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], roundint = FALSE)
?phyloseq::plot_tree
phyloseq::plot_tree(a$model)
?phyloseq::prune_taxa
phyloseq::phy_tree(a$model)
a$model %>% ggplot2::autoplot()
x %>% ps_rf(exposure ~ . -outcome_prob, data = .)
(x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model
(x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model %>% plot
(x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model %>% ggplot2::autoplot()
rpart.plot::prp(a$model, box.col = c("pink", "palegreen3")[a$model$frame$yval], roundint = FALSE)
phyloseq::plot_tree((x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model)
phyloseq::plot_tree((x %>% ps_rf(exposure ~ . -outcome_prob, data = .))$model %>% phyloseq::phy_tree())
?phyloseq::phy_tree()
phyloseq::phy_tree(a$model)
rpart::printcp(a$model)
?rpart::plotcp
rpart::plotcp(a$model)
rpart::printcp(a$model)
rpart::printcp(a$model) %>% names()
rpart::printcp(a$model) %>% class
rpart::printcp(a$model)[,1]
rpart::printcp(a$model) %>% invisible()
a$model$cptable
(chemical %>% ps_rf(poisox ~ age + sex, data = .))$model
(chemical %>% ps_cart(poisox ~ age + sex, data = .))$model
(chemical %>% ps_cart(poisox ~ age + sex, data = .))$model$cptable
a$model$cptable
?rpart::printcp
a$model$csplit
a$model$cptable
a$model$cptable[,"xerror"]
?rpart::plotcp
?stop
a$model$cptable
a$model$cptable %>% class()
a$model$cptable %>% as.data.frame()
?ggplot2::geom_errorbar
library(propensityml)
plot_cp(a)
library(propensityml)
plot_cp(a)
library(propensityml)
plot_cp(a)
rpart::plotcp(a$model)
?ggplot2::geom_errorbar
library(propensityml)
plot_cp(a)
?ggplot2::geom_pointrange
library(propensityml)
plot_cp(a)
plot_cp(a, col = "red")
a
?rpart::prune
plot_cp(chemical %>% ps_glm(poisox ~ age + sex, data = .))
library(propensityml)
ps_prune(a, 2)
ps_prune(a, 2)$model
ps_prune(a, 2)$model %>% names
ps_prune(a, 2)$model %>% class
ps_prune(a, 3)
library(propensityml)
usethis::use_package("ggplot2")
library(propensityml)
?var
?mean
?var
library(propensityml)
?rpart::prune
library(propensityml)
?data.table::data.table
?`data.table-class`
?data.table::`data.table-class`
?glmnet::glmnet
foreach::foreach(i = 1:5, .combine = list) foreach::`%do%` {1:5}
?foreach::foreach
foreach::foreach(i = 1:5, .combine = list) %do% {1:5}
?sim_outcome
library(propensityml)
usethis::use_package("foreach")
library(propensityml)
library(propensityml)
mc_setoguchi(N = 100)
mc_setoguchi(N = 100, n_dat = 10)
mc_setoguchi(N = 10, n_dat = 10)
sim_outcome(10)
data.table::rbindlist(sim_outcome(10), sim_outcome(10))
data.table::rbindlist(list(sim_outcome(10), sim_outcome(10)))
?data.table::rbind
?data.table::rbind.data.table
library(propensityml)
mc_setoguchi(N = 10, n_dat = 10)
library(propensityml)
?doMC::registerDoMC
doMC::registerDoMC(cores = 10)
mc_setoguchi(N = 10, n_dat = 100)
library(propensityml)
